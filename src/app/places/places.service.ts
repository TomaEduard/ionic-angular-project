import { PlaceLocation } from './location.model';
import { AuthService } from './../auth/auth.service';
import { Injectable } from '@angular/core';
import { Place } from './place.model';
import { BehaviorSubject, of, Observable } from 'rxjs';
import { take, map, tap, switchMap } from 'rxjs/operators';
import { HttpClient } from '@angular/common/http';

export interface PlaceData {
  availableFrom: string,
  availableTo: string,
  description: string,
  imageUrl: string,
  price: number,
  title: string,
  userId: string,
  location: PlaceLocation
}

@Injectable({
  providedIn: 'root'
})
export class PlacesService {

  // hardCoddedPlaces: Place[] = [
  //   new Place(
  //     'p1',
  //     'Manhattan Mansion',
  //     'In the heart of New York City.',
  //     'https://lonelyplanetimages.imgix.net/mastheads/GettyImages-538096543_medium.jpg?sharp=10&vib=20&w=1200',
  //     149.99,
  //     new Date('2019-01-01'),
  //     new Date('2019-12-31'),
  //     'abc'
  //   ),
  //   new Place(
  //     'p2',
  //     "L'Amour Toujours",
  //     'A romantic place in Paris!',
  //     'https://upload.wikimedia.org/wikipedia/commons/thumb/e/e6/Paris_Night.jpg/1024px-Paris_Night.jpg',
  //     189.99,
  //     new Date('2019-01-01'),
  //     new Date('2019-12-31'),
  //     'abc'
  //   ),
  //   new Place(
  //     'p3',
  //     'The Foggy Palace',
  //     'Not your average city trip!',
  //     'https://upload.wikimedia.org/wikipedia/commons/0/01/San_Francisco_with_two_bridges_and_the_fog.jpg',
  //     99.99,
  //     new Date('2019-01-01'),
  //     new Date('2019-12-31'),
  //     'abc'
  //   )
  // ]

  private _places: BehaviorSubject<Place[]> = new BehaviorSubject<Place[]>([]);

  constructor(
    private authService: AuthService,
    private http: HttpClient
  ) { }

  get places() {
    return this._places.asObservable();
  }

  fetchPlaces() {
    return this.http.get<{[key: string]: PlaceData}>('https://ionic-angular-course-78f48-default-rtdb.europe-west1.firebasedatabase.app/offered-places.json')

      .pipe(
        
        // added id from firebase key of object
        // Ex. -MiVVszzHktRB4ANyZT_: {PlaceData object};...
        tap(res => {
          console.log('res', res)
        }),

        map(resData => {
          const places = [];
          
          for (const key in resData) {
            if (resData.hasOwnProperty(key)) {
              places.push(new Place(
                key, 
                resData[key].title, 
                resData[key].description,
                resData[key].imageUrl,
                resData[key].price,
                new Date(resData[key].availableFrom),
                new Date(resData[key].availableTo),
                resData[key].userId,
                resData[key].location
              ))
            }
          }
          return places;
        }),
        tap(places => {
          this._places.next(places);
        })
      );
  }

  getPlace(id: string) {
    return this.http.get<PlaceData>(
      `https://ionic-angular-course-78f48-default-rtdb.europe-west1.firebasedatabase.app/offered-places/${id}.json`
    )
    .pipe(
      tap(resData => {
        console.log('resData getPlace', resData)
      }),
      map((placeData: PlaceData) => {
        return new Place(
          id,
          placeData.title,
          placeData.description,
          placeData.imageUrl,
          placeData.price,
          new Date(placeData.availableFrom),
          new Date(placeData.availableTo),
          placeData.userId,
          placeData.location
        )
      })
    )
  }

  uploadImage(image: File) {
    const uploadData = new FormData();
    uploadData.append('image', image);

    return this.http.post<{imageUrl: string, imagePath: string}>(
      'https://us-central1-ionic-angular-course-78f48.cloudfunctions.net/storeImage',
      uploadData
    );
  }

  addPlace(
    title: string, 
    desciption: string, 
    price: number, 
    dateFrom: Date, 
    dateTo: Date,
    location: PlaceLocation,
    imageUrl: string
  ): Observable<any> {
    let generatedId: string;

    const newPlace = new Place(
      null,
      title,
      desciption,
      imageUrl,
      price,
      dateFrom,
      dateTo,
      this.authService.userId,
      location
    );

    return this.http.post<{name: string}>(
      'https://ionic-angular-course-78f48-default-rtdb.europe-west1.firebasedatabase.app/offered-places.json',
      {...newPlace, id: null}
    ).pipe(
      // *specific firebase, save local the id from name property
      switchMap(resData => {
        console.log('resData', resData)
        generatedId = resData.name; // generated by firebase
        return this.places;
      }),
      take(1),
      tap(places => {
        newPlace.id = generatedId;
        this._places.next(places.concat(newPlace));
      })
    );

  }

  updatePlace(placeId: string, title: string, description: string) {

    let updatedPlaces: Place[];

    return this.places
      .pipe(
        take(1),

        // make sure we have alltime a list of place
        switchMap(places => {
          if (!places || places.length <= 0) {
            return this.fetchPlaces();
          } else {
            return of(places);
          }
        }),

        switchMap(places => {
          
          const updatedPlaceIndex = places.findIndex(e => e.id === placeId);
          if (updatedPlaceIndex === -1) {
            return;
          } 

          // local copy of Places[]
          updatedPlaces = [...places]

          // copy the old place to have old values of props.
          const oldPlace = updatedPlaces[updatedPlaceIndex];

          // modify the place
          updatedPlaces[updatedPlaceIndex] = new Place(
            oldPlace.id,
            title,
            description,
            oldPlace.imageUrl,
            oldPlace.price,
            oldPlace.availableFrom,
            oldPlace.availableTo,
            oldPlace.userId,
            oldPlace.location
          );
          
          return this.http.put(
            `https://ionic-angular-course-78f48-default-rtdb.europe-west1.firebasedatabase.app/offered-places/${placeId}.json`,
            {...updatedPlaces[updatedPlaceIndex], id: null}
          )
        }),
        
        tap(() => {
          // save the new places over old one
          this._places.next(updatedPlaces)
        })
      )

    // const indexOfObject = this._places.getValue().findIndex(e => e.id === placeId);

    // if (indexOfObject === -1) {
    //   return;
    // } 

    // let place: Place = this._places.getValue()[indexOfObject];
    // place.title = title;
    // place.description = description;

  }
}
